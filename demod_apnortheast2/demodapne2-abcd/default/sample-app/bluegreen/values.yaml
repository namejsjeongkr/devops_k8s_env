### This is a YAML-formatted file.
### Declare variables to be passed into your templates.

### Default values for sample-bluegreen.
appName: sample-bluegreen
namespace: bluegreen
env: demodapne2


### ExternalSecrets TEST
volume:
  enabled: false 

### Argo Rollout auto promote Config
autoPromotionEnabled: true


### Spring env Config
envVars:
  - name: spring.profiles.active
    value: demodapne2


### Pod Config
replicaCount: 3

podAnnotations:
  # sidecar.istio.io/inject: "true"
  # traffic.sidecar.istio.io/excludeOutboundPorts: "5440, 7379"


### HPA Config
autoscaling:
  enabled: false
  minReplicas: 10
  maxReplicas: 20
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80


### IRSA Config 
serviceAccount:
  enabled: false
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations:
    eks.amazonaws.com/role-arn: IAM_ROLE_ARN
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


### Pod, Service ports Config
ports:
- name: http
  port: 80
  targetPort: 5000
  protocol: TCP

service:
  type: ClusterIP
  port: 80


### Pod QoS Config
resources: 
  enabled: true
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 200m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 1Gi


### Pod deployment strategies Config
nodeSelector: {}

tolerations: []

affinity: {}


### Pod Security Config
podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


### Ingress Config
ingress:
  enabled: true
  className: ""
  annotations:
    alb.ingress.kubernetes.io/actions.ssl-redirect: >-
      {"Type": "redirect", "RedirectConfig":{ "Protocol": "HTTPS", "Port":
      "443", "StatusCode": "HTTP_301"}}
    alb.ingress.kubernetes.io/certificate-arn: >-
      arn:aws:acm:ap-northeast-2:086230238707:certificate/27acfc2d-9756-4389-b070-7f952149b37c
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    external-dns.alpha.kubernetes.io/hostname: "sample-bluegreen.namejsjeongkr.com"
    alb.ingress.kubernetes.io/inbound-cidrs: 219.254.48.3/32
  hosts:
    - http:
      paths:
        - backend:
            service:
              name: sample-bluegreen-svc-active
              port:
                number: 80
  tls: []


# PDB
podDisruptionBudget:
  # https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  enabled: false
  minAvailable:
  maxUnavailable:
